version: "3.9"

volumes:
  duckdata:
    driver: local

networks:
  backend:
    driver: bridge

services:
  api:
    build: 
      context: .
      target: runtime
    command: >
      uvicorn nf_llm.api.main:app 
      --host 0.0.0.0 
      --port 8000 
      --reload
    environment:
      - DATABASE_URL=duckdb:////app/data/nf_llm.duckdb
      - PYTHONPATH=/app/src
    volumes:
      - duckdata:/app/data
      - .:/app:cached  # For development hot reload
    networks: [backend]
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  ui:
    build: 
      context: .
      target: runtime
    command: >
      streamlit run src/nf_llm/app.py 
      --server.port 8501 
      --server.address 0.0.0.0
      --server.enableCORS false
      --server.enableXsrfProtection false
    environment:
      - API_BASE_URL=http://api:8000
      - PYTHONPATH=/app/src
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - duckdata:/app/data
      - .:/app:cached  # For development hot reload
    networks: [backend]
    ports:
      - "8501:8501"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Optional: Database management service
  db-admin:
    build: 
      context: .
      target: runtime
    command: >
      python -c "
      import time
      import duckdb
      print('Database admin ready. Connect to /app/data/nf_llm.duckdb')
      while True: time.sleep(60)
      "
    environment:
      - DATABASE_URL=duckdb:////app/data/nf_llm.duckdb
    volumes:
      - duckdata:/app/data
      - .:/app:cached
    networks: [backend]
    profiles: ["admin"]  # Only start with --profile admin
